// Next steps:
// 1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
// 2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
// 3. Run prisma db pull to turn your database schema into a Prisma schema.
// 4. Run prisma generate to generate the Prisma Client. You can then start querying your database.
// 5. Tip: Explore how you can extend the ORM with scalable connection pooling, global caching, and real-time database events. Read: https://pris.ly/cli/beyond-orm        

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  profileImage     String?
  phone            String  @unique
  name             String?
  email            String?
  address          String?
  streetNumber     String?
  city             String?
  state            String?
  zip              String?
  emergencyContact String?
  gender           String?
  dob              String?
  profession       String?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  blog         Blog[]
  quiz         Quiz[]
  propertyLoss PropertyLoss[]
}

model Blog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  tags      String[]
  location  String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  score     Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyLoss {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  cost        String
  description String
  location    String
  date        String
  isVerified  Boolean
  isClaimed   Boolean
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
